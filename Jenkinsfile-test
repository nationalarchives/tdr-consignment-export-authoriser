library("tdr-jenkinslib")

  def versionTag = "v${env.BUILD_NUMBER}"
  def libraryName = "consignment-export-authoriser"
  def repo = "tdr-${libraryName}"
  def scalaVersion = 2.13

  pipeline {
    agent {
      label "built-in"
    }
    parameters {
      choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are running the authoriser tests for")
    }
    stages {
      stage("Run git secrets") {
        agent {
          label "built-in"
        }
        steps {
          script {
            tdr.runGitSecrets(repo)
          }
        }
      }
      stage("Build") {
        agent {
          ecs {
            inheritFrom "transfer-frontend"
          }
        }
        steps {
          script {
            tdr.reportStartOfBuildToGitHub(repo, env.GIT_COMMIT)
            sh "sbt -no-colors assembly"
            stash includes: "target/scala-${scalaVersion}/${libraryName}.jar", name: "${libraryName}-jar"
          }
        }
      }
      stage('Post-build') {
        agent {
          ecs {
            inheritFrom "aws"
            taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRole${params.STAGE.capitalize()}"
          }
        }
        when {
          expression { env.BRANCH_NAME == "master"}
        }

        stages {
          stage('Deploy to integration') {
            steps {
              script {
                unstash "${libraryName}-jar"
                sh "aws s3 cp target/scala-${scalaVersion}/${libraryName}.jar s3://tdr-backend-code-mgmt/${versionTag}/${libraryName}.jar"

                tdr.configureJenkinsGitUser()

                sh "git tag ${versionTag}"
                sshagent(['github-jenkins']) {
                  sh("git push origin ${versionTag}")
                }

                build(
                  job: "TDR Consignment Export Authoriser Deploy",
                  parameters: [
                    string(name: "STAGE", value: "intg"),
                    string(name: "TO_DEPLOY", value: versionTag)
                  ],
                  wait: false)
              }
            }
          }
        }
      }
    }
    post {
      failure {
        script {
          tdr.reportFailedBuildToGitHub(repo, env.GIT_COMMIT)
        }
      }
      success {
        script {
          tdr.reportSuccessfulBuildToGitHub(repo, env.GIT_COMMIT)
        }
      }
    }
  }

